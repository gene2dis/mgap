/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTP {
        ext.args = [
            "-q ${params.fastp_qualified_quality}",
            "--unqualified_percent_limit ${params.fastp_unqualified_percent_limit}",
            "--cut_front",
            "--cut_front_window_size ${params.fastp_cut_front_window_size}",
            "--cut_front_mean_quality ${params.fastp_cut_front_mean_quality}",
            "--cut_right",
            "--cut_right_window_size ${params.fastp_cut_right_window_size}",
            "--cut_right_mean_quality ${params.fastp_cut_right_mean_quality}",
            "--length_required ${params.fastp_reads_minlength}",
            "--detect_adapter_for_pe",
            "--n_base_limit ${params.fastp_n_base_limit}",
            "--trim_poly_g"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/${meta.id}/read_processing/fastp" },
            mode: params.publish_dir_mode,
            pattern: "*.{html,json,fastq.gz}"
        ]
    }

    withName: MASH_SKETCH {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/read_processing/mash" },
            mode: params.publish_dir_mode,
            pattern: "*.{msh,mash_stats,mash_coverage}"
        ]
    }

    withName: KRAKEN2 {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/read_processing/kraken2" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt,fastq.gz,fastq}"
        ]
    }

    withName: BRACKEN {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/read_processing/bracken" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv}"
        ]
    }

    withName: SEQTK_SAMPLE {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/read_processing/subsampled" },
            mode: params.publish_dir_mode,
            pattern: "*.{fastq.gz}"
        ]
    }

    withName: UNICYCLER {
        ext.args = [
            "--min_fasta_length ${params.unicycler_min_fasta_length}",
            "--mode ${params.unicycler_mode}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/${meta.id}/assemblies" },
            mode: params.publish_dir_mode,
            pattern: "*.{log,fa,gfa}"
        ]
    }

    withName: SPADES {
        ext.args = [
            "--isolate",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/${meta.id}/assemblies" },
            mode: params.publish_dir_mode,
            pattern: "*.{log,fa,gfa}"
        ]
    }

    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/qc/quast" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv}"
        ]
    }

    withName: CHECKM2 {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation/checkm2" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv}"
        ]
    }

    withName: MLST {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation/mlst" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv}"
        ]
    }

    withName: GTDBTK {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation/gtdbtk" },
            mode: params.publish_dir_mode,
            pattern: "{gtdbtk}.*"
        ]
    }

    withName: BAKTA {
        ext.args = [
            "--skip-plot",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation/bakta" },
            mode: params.publish_dir_mode,
            pattern: "*"
        ]
    }

    withName: AMRFINDERPLUS_RUN{
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation/amrfinder" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv}"
        ]
    }

    withName: GENOMAD{
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation/genomad" },
            mode: params.publish_dir_mode,
            pattern: "*.{json,fna,faa,tsv}"
        ]
    }

    withName: KLEBORATE{
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation/kleborate" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt}"
        ]
    }

    withName: STAPHOPIASCCMEC{
        ext.args = [
            "--hamming"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation/sccmec" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv}"
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
